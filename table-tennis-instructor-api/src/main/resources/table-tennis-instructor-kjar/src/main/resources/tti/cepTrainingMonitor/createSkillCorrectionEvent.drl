//created on: May 4, 2020
package cepTrainingMonitor

//list any import classes here.
import tableTennisInstructor.model.drools.events.*;
import tableTennisInstructor.model.drools.facts.training.*;
import java.util.ArrayList;
import java.util.List;
//list any import classes here.



//declare any global variables here

rule "Create Skill Correction Event when only toMuchSuccessiveMissEvent is present"
	salience 90
    when
    	$tre: TrainingExecution()
        $toMuchSuccMiss: ToMuchSuccessiveMiss(processed == false && $tre.id == trainingId)
        not RacketAngleCorrectionEvent(processed == false && trainigExecutionId == $tre.id &&
                ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))

        not RacketSpeedCorrectionEvent(processed == false && trainigExecutionId == $tre.id &&
            ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))

        not BadBodyPositionEvent(processed == false && traininExecutionId == $tre.id &&
            ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))
    then
        modify($toMuchSuccMiss){setProcessed(true)}
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $toMuchSuccMiss.message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);
end


rule "Create Skill Correction Event when toMuchSuccessiveMissEvent and RacketAngleCorrection are present"
	salience 120
    when
    	$tre: TrainingExecution()
        $toMuchSuccMiss: ToMuchSuccessiveMiss(processed == false, trainingId == $tre.id)
        $racketAngleCorr: RacketAngleCorrectionEvent(
                processed == false && trainigExecutionId == $tre.id &&
                    ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))

    then
        modify($toMuchSuccMiss){setProcessed(true)}
        modify($racketAngleCorr){setProcessed(true)}
        String $message = $toMuchSuccMiss.getMessage() + " " + $racketAngleCorr.message;
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
		insert(correctionEvent);
		System.out.println(correctionEvent.message);
end

rule "Create Skill Correction Event when toMuchSuccessiveMissEvent and RacketSpeedCorrectionEvent are present"
	salience 120
    when
    	$tre: TrainingExecution()
        $toMuchSuccMiss: ToMuchSuccessiveMiss(processed == false, trainingId == $tre.id)

        $racketSpeedCorr: RacketSpeedCorrectionEvent(processed == false && trainigExecutionId == $tre.id &&
                        ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))

    then
        modify($toMuchSuccMiss){setProcessed(true)}
        modify($racketSpeedCorr){setProcessed(true)}
        String $message = $toMuchSuccMiss.message + " " + $racketSpeedCorr.message;
		SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);
end

rule "Create Skill Correction Event when toMuchSuccessiveMissEvent and BadBodyPositionEvent are present"
	salience 110
    when
    	$tre: TrainingExecution()
    	$toMuchSuccMiss: ToMuchSuccessiveMiss(processed == false, trainingId == $tre.id)
        $badBodyPos: BadBodyPositionEvent(processed == false && traininExecutionId == $tre.id &&
                                ( (this before[0s,2s] $toMuchSuccMiss) || (this after[0s,2s] $toMuchSuccMiss)))

    then
        modify($toMuchSuccMiss){setProcessed(true)}
        modify($badBodyPos){setProcessed(true)}
        String $message = $toMuchSuccMiss.message + ", " + $badBodyPos.message;
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);

end


rule "Create Skill Correction Event when RacketAngleCorrection and BadBodyPositionEvent are present"
	salience 100
    when
    	$tre: TrainingExecution()
    	$badBodyPos: BadBodyPositionEvent(processed == false && traininExecutionId == $tre.id)
        $racketAngleCorr: RacketAngleCorrectionEvent(
                        processed == false && trainigExecutionId == $tre.id &&
                            ( (this before[0s,5s] $badBodyPos) || (this after[0s,5s] $badBodyPos)))
    then
    	modify($badBodyPos){setProcessed(true)}
        modify($racketAngleCorr){setProcessed(true)}
        String $message = $racketAngleCorr.message + " " + $badBodyPos.message;
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);
end

rule "Create Skill Correction Event when RacketSpeedCorrection and BadBodyPositionEvent are present"
	salience 100
    when
    	$tre: TrainingExecution()
    	$badBodyPos: BadBodyPositionEvent(processed == false && traininExecutionId == $tre.id)
    	$racketSpeedCorr: RacketSpeedCorrectionEvent(processed == false && trainigExecutionId == $tre.id &&
                                ( (this before[0s,2s] $badBodyPos) || (this after[0s,2s] $badBodyPos)))
    then
    	modify($badBodyPos){setProcessed(true)}
        modify($racketSpeedCorr){setProcessed(true)}
        String $message = $racketSpeedCorr.message + " " + $badBodyPos.message;
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);
end


rule "Create Skill Correction Event when RacketSpeedCorrection and RacketAngleCorrection are present"
	salience 110
    when
    	$tre: TrainingExecution()
    	$racketSpeedCorr: RacketSpeedCorrectionEvent(processed == false && trainigExecutionId == $tre.id)
        $racketAngleCorr: RacketAngleCorrectionEvent(
                                processed == false && trainigExecutionId == $tre.id &&
                                    ( (this before[0s,5s] $racketSpeedCorr) || (this after[0s,5s] $racketSpeedCorr)))

    then
    	modify($racketAngleCorr){setProcessed(true)}
        modify($racketSpeedCorr){setProcessed(true)}
        String $message = $racketSpeedCorr.message + " " + $racketAngleCorr.message;
        SkillCorrectionEvent correctionEvent = new SkillCorrectionEvent($tre.id, $message);
        insert(correctionEvent);
        System.out.println(correctionEvent.message);
end



