//created on: May 2, 2020
package trainingPlan

//list any import classes here.
import tableTennisInstructor.model.drools.facts.*;
import tableTennisInstructor.model.drools.facts.training.*;

rule "Set unknown previous skill mark if none training for this skill is dones"
    when
    	$trReq: TrainingChooseRequestFact($userId: userId, $trainHistory: trainHistory, $desiredSkill: desiredSkill)
    	$tfc: TrainingChooseFact(userId == $userId)
 		not AverageMark(userId == $userId)
 
    	Number(intValue == 0) from accumulate (
    	 						TrainingExecution(
    	 							training.skill.skillId == $desiredSkill.skillId
    	 						)	 
    	 						from $trainHistory,
    	 						init(int count = 0;),
    	 						action(count += 1;),
    	 						reverse(count -= 1;),
    	 						result(count)
    	 					)
    then
    	System.out.println("dobio je UNKNOWN prosecnu ocenu za ovaj skill");
    	AverageMark avgMark = new AverageMark();
    	avgMark.setUserId($userId);
    	avgMark.setTrainingMark(TrainingMark.UNKNOWN);
    	insert(avgMark);
end

rule "Set Bad previous skill mark if average skill mark is under 3"
	when
    	$trReq: TrainingChooseRequestFact($userId: userId, $trainHistory: trainHistory, $desiredSkill: desiredSkill)
    	$tfc: TrainingChooseFact(userId == $userId)
 		not AverageMark(userId == $userId)
 
    	Number(doubleValue < 3.0) from accumulate (
    	 						TrainingExecution(
    	 							training.skill.skillId == $desiredSkill.skillId,
    	 							$trainingMark: trainingMark
    	 						)	 
    	 						from $trainHistory,
    	 						init(int count = 0; int total = 0;),
    	 						action(
    	 								count += 1;
    	 								total +=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						reverse(
    	 							count -= 1;
    	 							total -=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						result(total / count)
    	 					)
    then
    	System.out.println("dobio je losu prosecnu ocenu za ovaj skill");
    	AverageMark avgMark = new AverageMark();
    	avgMark.setUserId($userId);
    	avgMark.setTrainingMark(TrainingMark.BAD);
    	insert(avgMark);
end


rule "Set GOOD previous skill mark if average skill mark is between 3 and 4"
	when
    	$trReq: TrainingChooseRequestFact($userId: userId, $trainHistory: trainHistory, $desiredSkill: desiredSkill)
    	$tfc: TrainingChooseFact(userId == $userId)
 		not AverageMark(userId == $userId)
 
    	Number(doubleValue >= 3.0 && doubleValue < 4.0) from accumulate (
    	 						TrainingExecution(
    	 							training.skill.skillId == $desiredSkill.skillId,
    	 							$trainingMark: trainingMark
    	 						)	 
    	 						from $trainHistory,
    	 						init(int count = 0; int total = 0;),
    	 						action(
    	 								count += 1;
    	 								total +=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						reverse(
    	 							count -= 1;
    	 							total -=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						result(total / count)
    	 					)
    then
    	System.out.println("dobio je GOOD prosecnu ocenu za ovaj skill ");
    	AverageMark avgMark = new AverageMark();
    	avgMark.setUserId($userId);
    	avgMark.setTrainingMark(TrainingMark.GOOD);
    	insert(avgMark);
end


rule "Set EXCELLENT previous skill mark if average skill mark is between 3 and 4"
	when
    	$trReq: TrainingChooseRequestFact($userId: userId, $trainHistory: trainHistory, $desiredSkill: desiredSkill)
    	$tfc: TrainingChooseFact(userId == $userId)
 		not AverageMark(userId == $userId)
 
    	Number(doubleValue >= 4.0) from accumulate (
    	 						TrainingExecution(
    	 							training.skill.skillId == $desiredSkill.skillId,
    	 							$trainingMark: trainingMark
    	 						)	 
    	 						from $trainHistory,
    	 						init(int count = 0; int total = 0;),
    	 						action(
    	 								count += 1;
    	 								total +=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						reverse(
    	 							count -= 1;
    	 							total -=
    	 									$trainingMark == TrainingMark.EXCELLENT ? 5 :
    	 										$trainingMark == TrainingMark.GOOD ? 3: 1;
    	 							),
    	 						result(total / count)
    	 					)
    then
    	System.out.println("dobio je EXCELENT prosecnu ocenu za ovaj skill");
    	AverageMark avgMark = new AverageMark();
    	avgMark.setUserId($userId);
    	avgMark.setTrainingMark(TrainingMark.EXCELLENT);
    	insert(avgMark);
end